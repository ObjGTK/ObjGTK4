/*
 * SPDX-FileCopyrightText: 2015-2017 Tyler Burton <software@tylerburton.ca>
 * SPDX-FileCopyrightText: 2015-2024 The ObjGTK authors, see AUTHORS file
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */

#import "OGTKWidget.h"

/**
 * A `GtkStatusbar` widget is usually placed along the bottom of an application's
 * main [class@Gtk.Window].
 * 
 * ![An example GtkStatusbar](statusbar.png)
 * 
 * A `GtkStatusBar` may provide a regular commentary of the application's
 * status (as is usually the case in a web browser, for example), or may be
 * used to simply output a message when the status changes, (when an upload
 * is complete in an FTP client, for example).
 * 
 * Status bars in GTK maintain a stack of messages. The message at
 * the top of the each bar’s stack is the one that will currently be displayed.
 * 
 * Any messages added to a statusbar’s stack must specify a context id that
 * is used to uniquely identify the source of a message. This context id can
 * be generated by [method@Gtk.Statusbar.get_context_id], given a message and
 * the statusbar that it will be added to. Note that messages are stored in a
 * stack, and when choosing which message to display, the stack structure is
 * adhered to, regardless of the context identifier of a message.
 * 
 * One could say that a statusbar maintains one stack of messages for
 * display purposes, but allows multiple message producers to maintain
 * sub-stacks of the messages they produced (via context ids).
 * 
 * Status bars are created using [ctor@Gtk.Statusbar.new].
 * 
 * Messages are added to the bar’s stack with [method@Gtk.Statusbar.push].
 * 
 * The message at the top of the stack can be removed using
 * [method@Gtk.Statusbar.pop]. A message can be removed from anywhere in the
 * stack if its message id was recorded at the time it was added. This is done
 * using [method@Gtk.Statusbar.remove].
 * 
 * ## CSS node
 * 
 * `GtkStatusbar` has a single CSS node with name `statusbar`.
 *
 */
@interface OGTKStatusbar : OGTKWidget
{

}


/**
 * Constructors
 */
- (instancetype)init;

/**
 * Methods
 */

- (GtkStatusbar*)castedGObject;

/**
 * Returns a new context identifier, given a description
 * of the actual context.
 * 
 * Note that the description is not shown in the UI.
 *
 * @param contextDescription textual description of what context
 *   the new message is being used in
 * @return an integer id
 */
- (guint)contextId:(OFString*)contextDescription;

/**
 * Removes the first message in the `GtkStatusbar`’s stack
 * with the given context id.
 * 
 * Note that this may not change the displayed message,
 * if the message at the top of the stack has a different
 * context id.
 *
 * @param contextId a context identifier
 */
- (void)pop:(guint)contextId;

/**
 * Pushes a new message onto a statusbar’s stack.
 *
 * @param contextId the message’s context id, as returned by
 *    gtk_statusbar_get_context_id()
 * @param text the message to add to the statusbar
 * @return a message id that can be used with
 *   [method@Gtk.Statusbar.remove].
 */
- (guint)pushWithContextId:(guint)contextId text:(OFString*)text;

/**
 * Forces the removal of a message from a statusbar’s stack.
 * The exact @context_id and @message_id must be specified.
 *
 * @param contextId a context identifier
 * @param messageId a message identifier, as returned by [method@Gtk.Statusbar.push]
 */
- (void)removeWithContextId:(guint)contextId messageId:(guint)messageId;

/**
 * Forces the removal of all messages from a statusbar's
 * stack with the exact @context_id.
 *
 * @param contextId a context identifier
 */
- (void)removeAll:(guint)contextId;

@end